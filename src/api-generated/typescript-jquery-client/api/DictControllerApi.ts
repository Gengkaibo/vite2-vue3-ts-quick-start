/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as $ from 'jquery';
import * as models from '../model/models';
import { COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


export class DictControllerApi {
    protected basePath = 'https://192.168.100.169:8092';
    public defaultHeaders: Array<string> = [];
    public defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings = null;
    public configuration: Configuration = new Configuration();

    constructor(basePath?: string, configuration?: Configuration, defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
        if (defaultExtraJQueryAjaxSettings) {
            this.defaultExtraJQueryAjaxSettings = defaultExtraJQueryAjaxSettings;
        }
    }

    private extendObj<T1, T2 extends T1>(objA: T2, objB: T2): T1|T2 {
        for (let key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    }

    /**
     * 
     * @summary 根据id批量删除
     * @param ids ids
     */
    public batchDeleteUsingDELETE3(ids: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQueryPromise<{ response: JQueryXHR; body: models.Resp;  }> {
        let localVarPath = this.basePath + '/dict/batchDelete';

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'ids' is not null or undefined
        if (ids === null || ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling batchDeleteUsingDELETE3.');
        }

        if (ids !== null && ids !== undefined) {
            queryParameters['ids'] = <string><any>ids;
        }

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'DELETE',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: models.Resp, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

    /**
     * 
     * @summary 列表查询
     * @param code 编码
     * @param cover 封面
     * @param createBy 创建人
     * @param createTime 创建时间
     * @param description 描述
     * @param field 排序字段
     * @param id 主键
     * @param name 名称
     * @param order 排序规则，asc升序，desc降序
     * @param pageFlag 是否分页，true,分页，flase不分页
     * @param pageNo 当前页码
     * @param pageSize 当前页面数据量
     * @param parentId 父级id
     * @param sort 排序
     * @param status 状态（是否禁用）
     * @param type 类型
     * @param updateBy 更新人
     * @param updateTime 更新时间
     */
    public getListByPageUsingGET3(code?: string, cover?: string, createBy?: string, createTime?: Date, description?: string, field?: string, id?: string, name?: string, order?: string, pageFlag?: boolean, pageNo?: number, pageSize?: number, parentId?: string, sort?: number, status?: string, type?: string, updateBy?: string, updateTime?: Date, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQueryPromise<{ response: JQueryXHR; body: models.Resp;  }> {
        let localVarPath = this.basePath + '/dict/getListByPage';

        let queryParameters: any = {};
        let headerParams: any = {};
        if (code !== null && code !== undefined) {
            queryParameters['code'] = <string><any>code;
        }
        if (cover !== null && cover !== undefined) {
            queryParameters['cover'] = <string><any>cover;
        }
        if (createBy !== null && createBy !== undefined) {
            queryParameters['createBy'] = <string><any>createBy;
        }
        if (createTime !== null && createTime !== undefined) {
            queryParameters['createTime'] = createTime.toISOString();
        }
        if (description !== null && description !== undefined) {
            queryParameters['description'] = <string><any>description;
        }
        if (field !== null && field !== undefined) {
            queryParameters['field'] = <string><any>field;
        }
        if (id !== null && id !== undefined) {
            queryParameters['id'] = <string><any>id;
        }
        if (name !== null && name !== undefined) {
            queryParameters['name'] = <string><any>name;
        }
        if (order !== null && order !== undefined) {
            queryParameters['order'] = <string><any>order;
        }
        if (pageFlag !== null && pageFlag !== undefined) {
            queryParameters['pageFlag'] = <string><any>pageFlag;
        }
        if (pageNo !== null && pageNo !== undefined) {
            queryParameters['pageNo'] = <string><any>pageNo;
        }
        if (pageSize !== null && pageSize !== undefined) {
            queryParameters['pageSize'] = <string><any>pageSize;
        }
        if (parentId !== null && parentId !== undefined) {
            queryParameters['parentId'] = <string><any>parentId;
        }
        if (sort !== null && sort !== undefined) {
            queryParameters['sort'] = <string><any>sort;
        }
        if (status !== null && status !== undefined) {
            queryParameters['status'] = <string><any>status;
        }
        if (type !== null && type !== undefined) {
            queryParameters['type'] = <string><any>type;
        }
        if (updateBy !== null && updateBy !== undefined) {
            queryParameters['updateBy'] = <string><any>updateBy;
        }
        if (updateTime !== null && updateTime !== undefined) {
            queryParameters['updateTime'] = updateTime.toISOString();
        }

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: models.Resp, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

    /**
     * 
     * @summary 专题类型列表查询
     * @param industryType 行业类型
     * @param status 是否禁用（0表示未禁用，1表示禁用）
     * @param themeType 专题类型
     */
    public getListUsingGET(industryType?: string, status?: string, themeType?: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQueryPromise<{ response: JQueryXHR; body: models.Resp;  }> {
        let localVarPath = this.basePath + '/dict/getThemeTypeList';

        let queryParameters: any = {};
        let headerParams: any = {};
        if (industryType !== null && industryType !== undefined) {
            queryParameters['industryType'] = <string><any>industryType;
        }
        if (status !== null && status !== undefined) {
            queryParameters['status'] = <string><any>status;
        }
        if (themeType !== null && themeType !== undefined) {
            queryParameters['themeType'] = <string><any>themeType;
        }

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: models.Resp, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

    /**
     * 
     * @summary 新增
     * @param dict dict
     */
    public saveUsingPOST3(dict: models.Dict, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQueryPromise<{ response: JQueryXHR; body: models.Resp;  }> {
        let localVarPath = this.basePath + '/dict/save';

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'dict' is not null or undefined
        if (dict === null || dict === undefined) {
            throw new Error('Required parameter dict was null or undefined when calling saveUsingPOST3.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }


        headerParams['Content-Type'] = 'application/json';

        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'POST',
            headers: headerParams,
            processData: false
        };

        requestOptions.data = JSON.stringify(dict);
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: models.Resp, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

    /**
     * 
     * @summary 修改
     * @param dict dict
     */
    public updateUsingPUT3(dict: models.Dict, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQueryPromise<{ response: JQueryXHR; body: models.Resp;  }> {
        let localVarPath = this.basePath + '/dict/update';

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'dict' is not null or undefined
        if (dict === null || dict === undefined) {
            throw new Error('Required parameter dict was null or undefined when calling updateUsingPUT3.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }


        headerParams['Content-Type'] = 'application/json';

        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'PUT',
            headers: headerParams,
            processData: false
        };

        requestOptions.data = JSON.stringify(dict);
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: models.Resp, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

}
